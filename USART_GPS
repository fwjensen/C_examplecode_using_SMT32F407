#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_conf.h"
#include "system_stm32f4xx.h"
#include "stm32f4xx_usart.h"
#include "stm32f4xx_exti.h"
#include "stm32f4xx_syscfg.h"


GPIO_InitTypeDef GPIO_InitStructure;
USART_InitTypeDef USART_InitStructure;

void Initialize_GPIOA_USART()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOAEN, ENABLE);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART1);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
}

void Initialize_USART()
{
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_Mode = USART_Mode_Rx;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;

	USART_Init(USART2, &USART_InitStructure);

	USART_Cmd(USART2, ENABLE);

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
}

char melding[64];
char send[1028];
int i = 0, j = 0;

void USART1_IRQHandler(void){

	// check if the USART1 receive interrupt flag was set
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET){
		melding[i++] = USART_ReceiveData(USART2);
		if(melding[i] == '\n'){
			if(melding[4] == 'G'){
				send[j] += melding;
				j += i;
			}
			i = 0;
			melding[0] = '\0';
		}
	}
}

int main(void)
{
	Initialize_GPIOA_USART();
	Initialize_USART();

    while(1)
    {
//    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET){
//    		melding[i++] = USART_ReceiveData(USART2);
//    	}
    }
}
